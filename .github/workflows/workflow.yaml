name: solar system workflow

on:
    workflow_dispatch:
    push:
        branches:
            - 'feature-*'
            - main

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
    
jobs:
    unit-testing:
        name: Unit Testing
        strategy:
            matrix:
                node_version: [18, 19, 20]
                os: [ubuntu-latest, macos-latest]
                exclude:
                    - node_version: 18
                      os: macos-latest

        runs-on: ${{ matrix.os }}
        steps:
            - name: Checkout Repo
              uses: actions/checkout@v4
            
            - name: setup Node.js Version-${{ matrix.node_version }}
              uses: actions/setup-node@v3
              with:
                node-version: ${{ matrix.node_version }}
            
            - name: Install Dependencies
              run: npm install

            - name: Run Unit Tests
              run: npm test

            - name: Archive Test Result
              uses: actions/upload-artifact@v4 
              with:
                name: Mocha-Test-Result-${{ matrix.os }}-${{ matrix.node_version }}
                path: test-results.xml

    
    code-coverage:
        name: code coverage
        needs: unit-testing
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Repo
              uses: actions/checkout@v4
            
            - name: setup NodeJs version 18
              uses: actions/setup-node@v3
              with:
                node-version: 18

            - name: Install Dependencies
              run: npm install

            - name: check code coverage
              continue-on-error: true
              run: npm run coverage

            - name: archive coverage result
              uses: actions/upload-artifact@v4 
              with:
                name: code-coverage-result
                path: coverage
                retention-days: 5

    containerization:
        name: containerization with docker
        needs: code-coverage
        permissions:
            contents: read
            packages: write
        runs-on: ubuntu-latest
        steps:
            - name: checkout repo
              uses: actions/checkout@v4
            
            - name: docker-login
              uses: docker/login-action@v3
              with:
                username: ${{ vars.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Build docker image
              uses: docker/build-push-action@v6
              with:
                context: .
                push: false
                tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system2:latest

            - name: Test Docker image
              run: |
                docker images
                docker run --name solar-system-app -d \
                -p 3000:3000 \
                -e MONGO_URI=$MONGO_URI \
                -e MONGO_USERNAME=$MONGO_USERNAME \
                -e MONGO_PASSWORD=$MONGO_PASSWORD \
                ${{ vars.DOCKERHUB_USERNAME }}/solar-system2:latest
                export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
                echo $IP

            - name: Push docker image
              uses: docker/build-push-action@v6
              with:
                context: .
                push: true
                tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system2:latest

    terraform:
        name: terraform deployment
        needs: containerization
        runs-on: ubuntu-latest
        environment: production
        steps:
            - name: checkout
              uses: actions/checkout@v5

            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4.3.1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: eu-central-1

            - name: HashiCorp - Setup Terraform
              uses: hashicorp/setup-terraform@v3.1.2
              with:
                terraform_version: "1.1.7"

            - name: terraform init
              run: terraform init
              working-directory: ./Terraform

            - name: terraform plan
              run: terraform plan
              working-directory: ./Terraform

            - name: terraform apply
              run: terraform apply -auto-approve
              working-directory: ./Terraform

    deploy:
      name: deploy to EKS
      needs: terraform
      runs-on: ubuntu-latest
      steps:
        - name: checkout
          uses: actions/checkout@v5
        
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4.3.1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: eu-central-1
        
        - name: update kubeconfig
          run: |
            aws eks --region eu-central-1 update-kubeconfig --name stage-eks-cluster
        
        - name: Trigger app deployment   #install kubectl
          uses: statsig-io/kubectl-via-eksctl@main
          env:
            aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            region: eu-central-1
            cluster: stage-eks-cluster

        - name: Deploy k8s cluster
          run: |
            kubectl apply -f deployment.yaml
            kuectl apply -f service.yaml
          working-directory: ./k8s



